Jonathan Cox
CPSC 870
Final

This project aims to set the foundation for a robust and fully functional
3D game engine.  In this assignment, the following is currently implemented
on the framework:

  - A singleton based client
  - A particle system used to generate snow
  - The factory method has been used to manage mesh and texture information,
    as well duplicate instances of the particle systems for efficency
  - Inheritance and polymorphism was used to differentiate between static,
    dynamic, and player objects.  It has also been designed to be easily 
    extensible.
  - An L-system that is used to dynamically generate the tree mesh
  - An XML based file system that is designed to allow easy extenion of the
    game world
  - Collision detection
  - Shooting
  - Monster AI (aggressive or not).
  - A HUD that idicates player health (this part needs a lot of love...)

It should be noted that I am not the original author of the L-system class,
though I did extend it to go from a 2D system to a 3D system.  I also did
not write the original parseXML code, though it was also heavily modified to 
suit the needs of this project.

The directory structure is as follows:
   assets: contains fbx files
   ui_assets: contains fbx files used in the hud system
   xml: contains xml data files
   lsystem: stores all of the xml lsystem grammar files
   bin: store the executable main
   obj: stores all obj files generated at compile time
   Eigen: store the header files for the Eigen vectore/matrix libraries
   zones: contains the xml files that define zones in the game
   sound: holds the sound files used
   player: holds the xml files that determine initial player status, model
     used, etc
   hud: holds the xml files that define the hud system

The class diagram is shown in ClassDiagram.dia.  The new classes have been added.  A
slightly nicer to read diagram was included in the web page.

To run the program, use: ./frost

Keys: 
  Esc: Quit the application
  a/d: Rotate the camera around the player position (magenta dot) clockwise/
       counter clockwise
  w/s: Translate the camera forward/backward
  q/e: Strafe left/right
  F1:  Display/Hide the menu

** Notes on compiling: Please note that if complining on a 32 bit system, the 
   Makefile requires the following changes:
   Line 14: LIBDIR = /usr/lib/gcc4/x86
   Line 59: CXXFLAGS = -m32 $(GCC_DEBUG_FLAGS) -DFBXSDK_SHARED
   Line 59: LDFLAGS = -m32 $(GCC_LINK_FLAGS)

   Also note that this program requires that the FBX SDK library be installed
   as per the email sent previously.



